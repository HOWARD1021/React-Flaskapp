// Type definitions for html-minifier-terser 5.1
// Project: https://github.com/terser/html-minifier-terser#readme
// Definitions by: Piotr Błażejewicz <https://github.com/peterblazejewicz>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

/**
 * HTMLMinifier is a highly configurable, well-tested, JavaScript-based HTML minifier.
 */
export function minify(value: string, options?: Options): string;

/**
 * Most of the options are disabled by default
 */
export interface Options {
    /**
     * Treat attributes in case sensitive manner (useful for custom HTML tags)
     * @default false
     */
<<<<<<< Updated upstream
    caseSensitive?: boolean;
=======
    caseSensitive?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Omit attribute values from boolean attributes
     * @default false
     */
<<<<<<< Updated upstream
    collapseBooleanAttributes?: boolean;
=======
    collapseBooleanAttributes?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Don't leave any spaces between display:inline;
     * elements when collapsing. Must be used in conjunction with collapseWhitespace=true
     * @default false
     */
<<<<<<< Updated upstream
    collapseInlineTagWhitespace?: boolean;
=======
    collapseInlineTagWhitespace?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Collapse white space that contributes to text nodes in a document tree
     * @default false
     */
<<<<<<< Updated upstream
    collapseWhitespace?: boolean;
=======
    collapseWhitespace?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Always collapse to 1 space (never remove it entirely). Must be used in conjunction with `collapseWhitespace=true`
     * @default false
     */
<<<<<<< Updated upstream
    conservativeCollapse?: boolean;
=======
    conservativeCollapse?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Handle parse errors
     * @default false
     */
<<<<<<< Updated upstream
    continueOnParseError?: boolean;
=======
    continueOnParseError?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Arrays of regex'es that allow to support custom attribute assign expressions (e.g. `'<div flex?="{{mode != cover}}"></div>'`)
     * @default []
     */
<<<<<<< Updated upstream
    customAttrAssign?: RegExp[];
    /**
     * Regex that specifies custom attribute to strip newlines from (e.g. `/ng-class/`
     */
    customAttrCollapse?: RegExp;
=======
    customAttrAssign?: RegExp[] | undefined;
    /**
     * Regex that specifies custom attribute to strip newlines from (e.g. `/ng-class/`
     */
    customAttrCollapse?: RegExp | undefined;
>>>>>>> Stashed changes
    /**
     * Arrays of regex'es that allow to support custom attribute surround expressions (e.g. `<input {{#if value}}checked="checked"{{/if}}>`)
     * @default []
     */
<<<<<<< Updated upstream
    customAttrSurround?: RegExp[];
=======
    customAttrSurround?: RegExp[] | undefined;
>>>>>>> Stashed changes
    /**
     * Arrays of regex'es that allow to support custom event attributes for `minifyJS` (e.g. `ng-click`)
     * @default [/^on[a-z]{3,}$/]
     */
<<<<<<< Updated upstream
    customEventAttributes?: RegExp[];
=======
    customEventAttributes?: RegExp[] | undefined;
>>>>>>> Stashed changes
    /**
     * Use direct Unicode characters whenever possible
     * @default false
     */
<<<<<<< Updated upstream
    decodeEntities?: boolean;
=======
    decodeEntities?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Parse input according to HTML5 specifications
     * @default true
     */
<<<<<<< Updated upstream
    html5?: boolean;
=======
    html5?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Array of regex'es that allow to ignore certain comments, when matched
     * @default [ /^!/, /^\s*#/ ]
     */
<<<<<<< Updated upstream
    ignoreCustomComments?: RegExp[];
=======
    ignoreCustomComments?: RegExp[] | undefined;
>>>>>>> Stashed changes
    /**
     * Array of regex'es that allow to ignore certain fragments, when matched (e.g. `<?php ... ?>`, `{{ ... }}`, etc.)
     * @default [/<%[\s\S]*?%>/, /<\?[\s\S]\*?\?>/]
     */
<<<<<<< Updated upstream
    ignoreCustomFragments?: RegExp[];
=======
    ignoreCustomFragments?: RegExp[] | undefined;
>>>>>>> Stashed changes
    /**
     * Insert tags generated by HTML parser
     * @default true
     */
<<<<<<< Updated upstream
    includeAutoGeneratedTags?: boolean;
=======
    includeAutoGeneratedTags?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Keep the trailing slash on singleton elements
     * @default false
     */
<<<<<<< Updated upstream
    keepClosingSlash?: boolean;
    /**
     * Specify a maximum line length. Compressed output will be split by newlines at valid HTML split-points
     */
    maxLineLength?: number;
=======
    keepClosingSlash?: boolean | undefined;
    /**
     * Specify a maximum line length. Compressed output will be split by newlines at valid HTML split-points
     */
    maxLineLength?: number | undefined;
>>>>>>> Stashed changes
    /**
     * Minify CSS in style elements and style attributes
     * @default false
     */
<<<<<<< Updated upstream
    minifyCSS?: boolean | object | ((text: string, type?: string) => string);
=======
    minifyCSS?: boolean | object | ((text: string, type?: string) => string) | undefined;
>>>>>>> Stashed changes
    /**
     * Minify JavaScript in script elements and event attributes
     * @default false
     */
<<<<<<< Updated upstream
    minifyJS?: boolean | object | ((text: string, inline?: boolean) => string);
=======
    minifyJS?: boolean | object | ((text: string, inline?: boolean) => string) | undefined;
>>>>>>> Stashed changes
    /**
     * Minify URLs in various attributes
     * @default false
     */
<<<<<<< Updated upstream
    minifyURLs?: boolean | string | object | ((text: string) => string);
=======
    minifyURLs?: boolean | string | object | ((text: string) => string) | undefined;
>>>>>>> Stashed changes
    /**
     * Always collapse to 1 line break (never remove it entirely) when whitespace between tags include a line break.
     * Must be used in conjunction with `collapseWhitespace=true`
     * @default false
     */
<<<<<<< Updated upstream
    preserveLineBreaks?: boolean;
=======
    preserveLineBreaks?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Prevents the escaping of the values of attributes
     * @default false
     */
<<<<<<< Updated upstream
    preventAttributesEscaping?: boolean;
=======
    preventAttributesEscaping?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Process contents of conditional comments through minifier
     * @default false
     */
<<<<<<< Updated upstream
    processConditionalComments?: boolean;
=======
    processConditionalComments?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Array of strings corresponding to types of script elements to process through minifier
     * (e.g. `text/ng-template`, `text/x-handlebars-template`, etc.)
     * @default []
     */
<<<<<<< Updated upstream
    processScripts?: string[];
    /**
     * Type of quote to use for attribute values (' or ")
     */
    quoteCharacter?: string;
=======
    processScripts?: string[] | undefined;
    /**
     * Type of quote to use for attribute values (' or ")
     */
    quoteCharacter?: string | undefined;
>>>>>>> Stashed changes
    /**
     * Remove quotes around attributes when possible
     * @default false
     */
<<<<<<< Updated upstream
    removeAttributeQuotes?: boolean;
=======
    removeAttributeQuotes?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Strip HTML comments
     * @default false
     */
<<<<<<< Updated upstream
    removeComments?: boolean;
=======
    removeComments?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Remove all attributes with whitespace-only values
     * @default false
     */
<<<<<<< Updated upstream
    removeEmptyAttributes?: boolean | ((attrName: string, tag: string) => boolean);
=======
    removeEmptyAttributes?: boolean | ((attrName: string, tag: string) => boolean) | undefined;
>>>>>>> Stashed changes
    /**
     * Remove all elements with empty contents
     * @default false
     */
<<<<<<< Updated upstream
    removeEmptyElements?: boolean;
=======
    removeEmptyElements?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Remove optional tags
     * @default false
     */
<<<<<<< Updated upstream
    removeOptionalTags?: boolean;
=======
    removeOptionalTags?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Remove attributes when value matches default
     * @default false
     */
<<<<<<< Updated upstream
    removeRedundantAttributes?: boolean;
=======
    removeRedundantAttributes?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Remove `type="text/javascript"` from `script` tags. Other `type` attribute values are left intact
     * @default false
     */
<<<<<<< Updated upstream
    removeScriptTypeAttributes?: boolean;
=======
    removeScriptTypeAttributes?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Remove `type="text/css"` from `style` and `link` tags. Other `type` attribute values are left intact
     * @default false
     */
<<<<<<< Updated upstream
    removeStyleLinkTypeAttributes?: boolean;
=======
    removeStyleLinkTypeAttributes?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Remove space between attributes whenever possible. **Note that this will result in invalid HTML!**
     * @default false
     */
<<<<<<< Updated upstream
    removeTagWhitespace?: boolean;
=======
    removeTagWhitespace?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Sort attributes by frequency
     * @default false
     */
<<<<<<< Updated upstream
    sortAttributes?: boolean;
=======
    sortAttributes?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Sort style classes by frequency
     * @default false
     */
<<<<<<< Updated upstream
    sortClassName?: boolean;
=======
    sortClassName?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Trim white space around `ignoreCustomFragments`
     * @default false
     */
<<<<<<< Updated upstream
    trimCustomFragments?: boolean;
=======
    trimCustomFragments?: boolean | undefined;
>>>>>>> Stashed changes
    /**
     * Replaces the `doctype` with the short (HTML5) doctype
     * @default false
     */
<<<<<<< Updated upstream
    useShortDoctype?: boolean;
=======
    useShortDoctype?: boolean | undefined;
>>>>>>> Stashed changes
}
